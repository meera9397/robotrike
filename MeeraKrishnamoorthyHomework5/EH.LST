8086/87/88/186 MACRO ASSEMBLER    EH                                                       22:09:47  12/04/;6  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE EH
OBJECT MODULE PLACED IN EH.OBJ
ASSEMBLER INVOKED BY:  C:\UTIL\ASM86.EXE EH.ASM M1 EP DB


LOC  OBJ                  LINE     SOURCE

                             1            NAME  EH
                             2     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             3     ;                                                                            ;
                             4     ;                                    EH                                      ;
                             5     ;                     Event Handler related functions                        ;
                             6     ;                 used to activate display output and keypad input           ;
                             7     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8     
                             9     ; Description:      This program contains functions to initialize and
                            10     ;                   deal with the timer event handler and illegal
                            11     ;                   event handlers
                            12     ; Table of Contents:
                            13     ; 1) TimerEventHandler: calls MuxSegPatterns (function that outputs segment
                            14     ;                       patterns corresponding to a string/number to
                            15     ;                       the display) and Scan (function that scans keyboard
                            16     ;                       and reports input)and sends an EOI to the event handler 
                            17     ;                       when done. 
                            18     ; 2) InstallHandler: installs event handler for timer interrupt
                            19     ; 3) IllegalEventHandler: event handler for illegal interrupts -- does nothing
                            20     ;                         but send no specific EOI
                            21     ; 4) InitCS: initializes peripheral chip selects on 80188
                            22     ; 5) ClrIRQVectors: installs illegal event handler for all interrupts in
                            23     ;                   interrupt vector table
                            24     ;
                            25     ; Input:            None.
                            26     ; Output:           None.
                            27     ;
                            28     ; User Interface:   None. 
                            29     ; Error Handling:   None.
                            30     ;
                            31     ; Algorithms:       None.
                            32     ; Data Structures:  None.
                            33     ;
                            34     ; Revision History:
                            35     ;      10/30/16  Meera Krishnamoorthy   used functions written by Glen George
                            36     ;                                       to use for event handling/ timers
                            37     
                            38     
                            39     ; local include files
                            40 +1  $INCLUDE(EH_TI.INC)
                      =1    41     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    42     ;                                                                            ;
                      =1    43     ;                                  EH_TI.INC                                ;
                      =1    44     ;                              Event Handler Demo                            ;
                      =1    45     ;                                 Include File                               ;
                      =1    46     ;                                                                            ;
                      =1    47     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    48     
                      =1    49     ; This file contains the definitions for the Event Handler Demonstration
                      =1    50     ; program (EH_TI.ASM).
8086/87/88/186 MACRO ASSEMBLER    EH                                                       22:09:47  12/04/;6  PAGE    2


LOC  OBJ                  LINE     SOURCE

                      =1    51     
                      =1    52     ; Timer Definitions
                      =1    53     
                      =1    54     ; Addresses
  FF56                =1    55     Tmr0Ctrl        EQU     0FF56H          ;address of Timer 0 Control Register
  FF52                =1    56     Tmr0MaxCntA     EQU     0FF52H          ;address of Timer 0 Max Count A Register
  FF50                =1    57     Tmr0Count       EQU     0FF50H          ;address of Timer 0 Count Register
                      =1    58     
                      =1    59     ; Control Register Values
  E001                =1    60     Tmr0CtrlVal     EQU     0E001H          ;value to write to Timer 0 Control Register
                      =1    61                                             ;1---------------  enable timer
                      =1    62                                             ;-1--------------  write to control
                      =1    63                                             ;--1-------------  enable interrupts
                      =1    64                                             ;----000000------  reserved
                      =1    65                                             ;---0------0-----  read only
                      =1    66                                             ;-----------0----  TMRIN0 is an enable
                      =1    67                                             ;------------00--  count timer 2 outs
                      =1    68                                             ;--------------0-  single counter mode
                      =1    69                                             ;---------------1  continuous mode
  C001                =1    70     Tmr2CtrlVal     EQU     0C001H          ;value to write to Timer 2 Control Register
                      =1    71                                             ;1---------------  enable timer
                      =1    72                                             ;-1--------------  write to control
                      =1    73                                             ;--0-------------  no interrupts
                      =1    74                                             ;----000000-0000-  reserved
                      =1    75                                             ;---0------0-----  read only
                      =1    76                                             ;---------------1  continuous mode
                      =1    77     
                      =1    78     ; Interrupt Vectors
  0008                =1    79     Tmr0Vec         EQU     8               ;interrupt vector for Timer 0
                      =1    80     
                      =1    81     
                      =1    82     ; Interrupt Controller Definitions
                      =1    83     
                      =1    84     ; Addresses
  FF32                =1    85     INTCtrlrCtrl    EQU     0FF32H          ;address of interrupt controller for timer
  FF22                =1    86     INTCtrlrEOI     EQU     0FF22H          ;address of interrupt controller EOI register
                      =1    87     
                      =1    88     ; Register Values
  0001                =1    89     INTCtrlrCVal    EQU     00001H          ;set priority for timers to 1 and enable
                      =1    90                                             ;000000000000----  reserved
                      =1    91                                             ;------------0---  enable timer interrupt
                      =1    92                                             ;-------------001  timer priority
  0008                =1    93     TimerEOI        EQU     00008H          ;Timer EOI command (same for all timers)
  8000                =1    94     NonSpecEOI      EQU     08000H          ;Non-specific EOI command
                      =1    95     
                      =1    96     
                      =1    97     ; Timing Definitions
                      =1    98     
  0900                =1    99     COUNTS_PER_MS   EQU     2304            ;number of timer counts per 1 ms (assumes 18.
                                   432 MHz clock)
  0900                =1   100     MS_PER_SEG      EQU     2304             ;number of ms for each segment
                      =1   101     
                      =1   102     
                      =1   103     
                      =1   104     ; General Definitions
8086/87/88/186 MACRO ASSEMBLER    EH                                                       22:09:47  12/04/;6  PAGE    3


LOC  OBJ                  LINE     SOURCE

                      =1   105     
  0001                =1   106     FIRST_RESERVED_VEC      EQU     1       ;reserve vectors 1-3
  0003                =1   107     LAST_RESERVED_VEC       EQU     3
  0100                =1   108     NUM_IRQ_VECTORS         EQU     256     ;number of interrupt vectors
                      =1   109     
  0000                =1   110     LEDDisplay      EQU     0000H           ;display address
                      =1   111     
  0008                =1   112     NUM_DIGITS      EQU     8               ;number of digits in the display
                           113     
                           114     
                           115     CGROUP  GROUP   CODE
                           116     
----                       117     CODE SEGMENT PUBLIC 'CODE'
                           118     
                           119             ASSUME  CS:CGROUP
                           120             EXTRN   MuxSegPatterns:NEAR
                           121             EXTRN   Scan:NEAR
                           122     
                           123     ; KeypadDisplayHandler
                           124     ;
                           125     ; Description:       This procedure is the event handler for the timer
                           126     ;                    interrupt.  It first saves the registers, and then
                           127     ;                    calls "MuxSegmentPatterns", a function defined in
                           128     ;                    displays.asm that puts the segment patterns of each
                           129     ;                    character int he string on the display. Finally, it 
                           130     ;                    sends an EOI to the event handler and restorest eh register. 
                           131     ;
                           132     ; Operation:         First, the function puts the registers on the stack. Then,
                           133     ;                    it calls MuxSegPatterns to display the segments on the 
                           134     ;                    display. Finally it sends the EOI to the event handler and
                           135     ;                    restores the registers. 
                           136     
                           137     ;
                           138     ; Arguments:         None.
                           139     ; Return Value:      None.
                           140     ;
                           141     ; Local Variables:   None.
                           142     ; Shared Variables:  None.
                           143     ; Global Variables:  None.
                           144     ;
                           145     ; Input:             None.
                           146     ; Output:            None.
                           147     ;
                           148     ; Error Handling:    None.
                           149     ;
                           150     ; Algorithms:        None.
                           151     ; Data Structures:   None.
                           152     ;
                           153     ; Registers Changed: None
                           154     ; Stack Depth:       3 words
                           155     ;
                           156     ; Author:            Meera Krishnamoorthy
                           157     ; Last Modified:     12/3/2016
                           158     
0000                       159     KeypadDisplayHandler       PROC    NEAR
8086/87/88/186 MACRO ASSEMBLER    EH                                                       22:09:47  12/04/;6  PAGE    4


LOC  OBJ                  LINE     SOURCE

                           160     
0000                       161     StartEventHandler:
                           162     
0000 50                    163             PUSH    AX                      ;save the registers
0001 53                    164             PUSH    BX                      ;Event Handlers should NEVER change
0002 52                    165             PUSH    DX                      ;any register values
                           166     
0003 E80000         E      167     Call MuxSegPatterns                     ; calls function to display segment
                           168                                             ; patterns on the display one at a time
                           169                                             ; but very quickly (muxing)
0006 E80000         E      170     Call Scan                               ; calls function to get inputs from
                           171                                             ;keypad
                           172     
                           173     
0009                       174     EndTimerEventHandler:                   
                           175     
0009 BA22FF                176             MOV     DX, INTCtrlrEOI       ;send the EOI to the interrupt controller
000C B80800                177             MOV     AX, TimerEOI
000F EE                    178             OUT     DX, AL
                           179     
0010 5A                    180             POP     DX                      ;restore the registers
0011 5B                    181             POP     BX
0012 58                    182             POP     AX
                           183     
                           184     
0013 CF                    185             IRET                  ;and return (Event Handlers end with IRET not RET)
                           186     
                           187     KeypadDisplayHandler       ENDP
                           188     
                           189     ; InstallKeypadDisplayHandler
                           190     ;
                           191     ; Description:       Install the event handler for the timer interrupt.
                           192     ;
                           193     ; Operation:         Writes the address of the timer event handler to the
                           194     ;                    appropriate interrupt vector.
                           195     ;
                           196     ; Arguments:         None.
                           197     ; Return Value:      None.
                           198     ;
                           199     ; Local Variables:   None.
                           200     ; Shared Variables:  None.
                           201     ; Global Variables:  None.
                           202     ;
                           203     ; Input:             None.
                           204     ; Output:            None.
                           205     ;
                           206     ; Error Handling:    None.
                           207     ;
                           208     ; Algorithms:        None.
                           209     ; Data Structures:   None.
                           210     ;
                           211     ; Registers Changed: flags, AX, ES
                           212     ; Stack Depth:       0 words
                           213     ;
                           214     ; Author:            Glen George
8086/87/88/186 MACRO ASSEMBLER    EH                                                       22:09:47  12/04/;6  PAGE    5


LOC  OBJ                  LINE     SOURCE

                           215     ; Last Modified:     Jan. 28, 2002
                           216     
0014                       217     InstallKeypadDisplayHandler  PROC    NEAR
                           218     PUBLIC      InstallKeypadDisplayHandler
                           219     
                           220     
0014 33C0                  221             XOR     AX, AX          ;clear ES (interrupt vectors are in segment 0)
0016 8EC0                  222             MOV     ES, AX
                           223                                     ;store the vector
0018 26C70620000000 R      224             MOV     ES: WORD PTR (4 * Tmr0Vec), OFFSET(KeypadDisplayHandler)
001F 26C7062200---- R      225             MOV     ES: WORD PTR (4 * Tmr0Vec + 2), SEG(KeypadDisplayHandler)
                           226     
                           227     
0026 C3                    228             RET                     ;all done, return
                           229     
                           230     
                           231     InstallKeypadDisplayHandler  ENDP
                           232     
                           233     
                           234     ; IllegalEventHandler
                           235     ;
                           236     ; Description:       This procedure is the event handler for illegal
                           237     ;                    (uninitialized) interrupts.  It does nothing - it just
                           238     ;                    returns after sending a non-specific EOI.
                           239     ;
                           240     ; Operation:         Send a non-specific EOI and return.
                           241     ;
                           242     ; Arguments:         None.
                           243     ; Return Value:      None.
                           244     ;
                           245     ; Local Variables:   None.
                           246     ; Shared Variables:  None.
                           247     ; Global Variables:  None.
                           248     ;
                           249     ; Input:             None.
                           250     ; Output:            None.
                           251     ;
                           252     ; Error Handling:    None.
                           253     ;
                           254     ; Algorithms:        None.
                           255     ; Data Structures:   None.
                           256     ;
                           257     ; Registers Changed: None
                           258     ; Stack Depth:       2 words
                           259     ;
                           260     ; Author:            Glen George
                           261     ; Last Modified:     Dec. 25, 2000
                           262     
0027                       263     IllegalEventHandler     PROC    NEAR
                           264     PUBLIC      IllegalEventHandler
                           265     
0027 90                    266             NOP                             ;do nothing (can set breakpoint here)
                           267     
0028 50                    268             PUSH    AX                      ;save the registers
0029 52                    269             PUSH    DX
8086/87/88/186 MACRO ASSEMBLER    EH                                                       22:09:47  12/04/;6  PAGE    6


LOC  OBJ                  LINE     SOURCE

                           270     
002A BA22FF                271             MOV     DX, INTCtrlrEOI         ;send a non-sepecific EOI to the
002D B80080                272             MOV     AX, NonSpecEOI          ;   interrupt controller to clear out
0030 EE                    273             OUT     DX, AL                  ;   the interrupt that got us here
                           274     
0031 5A                    275             POP     DX                      ;restore the registers
0032 58                    276             POP     AX
                           277     
0033 CF                    278             IRET                            ;and return
                           279     
                           280     
                           281     IllegalEventHandler     ENDP
                           282     
                           283     
                           284     ; ClrIRQVectors
                           285     ;
                           286     ; Description:      This functions installs the IllegalEventHandler for all
                           287     ;                   interrupt vectors in the interrupt vector table.  Note
                           288     ;                   that all 256 vectors are initialized so the code must be
                           289     ;                   located above 400H.  The initialization skips  (does not
                           290     ;                   initialize vectors) from vectors FIRST_RESERVED_VEC to
                           291     ;                   LAST_RESERVED_VEC.
                           292     ;
                           293     ; Arguments:        None.
                           294     ; Return Value:     None.
                           295     ;
                           296     ; Local Variables:  CX    - vector counter.
                           297     ;                   ES:SI - pointer to vector table.
                           298     ; Shared Variables: None.
                           299     ; Global Variables: None.
                           300     ;
                           301     ; Input:            None.
                           302     ; Output:           None.
                           303     ;
                           304     ; Error Handling:   None.
                           305     ;
                           306     ; Algorithms:       None.
                           307     ; Data Structures:  None.
                           308     ;
                           309     ; Registers Used:   flags, AX, CX, SI, ES
                           310     ; Stack Depth:      1 word
                           311     ;
                           312     ; Author:           Glen George
                           313     ; Last Modified:    Feb. 8, 2002
                           314     
0034                       315     ClrIRQVectors   PROC    NEAR
                           316     PUBLIC      ClrIRQVectors
                           317     
0034                       318     InitClrVectorLoop:              ;setup to store the same handler 256 times
                           319     
0034 33C0                  320             XOR     AX, AX          ;clear ES (interrupt vectors are in segment 0)
0036 8EC0                  321             MOV     ES, AX
0038 BE0000                322             MOV     SI, 0           ;initialize SI to skip RESERVED_VECS (4 bytes each)
                           323     
003B B90001                324             MOV     CX, 256         ;up to 256 vectors to initialize
8086/87/88/186 MACRO ASSEMBLER    EH                                                       22:09:47  12/04/;6  PAGE    7


LOC  OBJ                  LINE     SOURCE

                           325     
                           326     
003E                       327     ClrVectorLoop:                  ;loop clearing each vector
                           328                                     ;check if should store the vector
003E 83FE04                329             CMP     SI, 4 * FIRST_RESERVED_VEC
0041 7205                  330             JB      DoStore         ;if before start of reserved field - store it
0043 83FE0C                331             CMP     SI, 4 * LAST_RESERVED_VEC
0046 760B                  332             JBE     DoneStore       ;if in the reserved vectors - don't store it
                           333             ;JA     DoStore         ;otherwise past them - so do the store
                           334     
0048                       335     DoStore:                        ;store the vector
0048 26C7042700     R      336             MOV     ES: WORD PTR [SI], OFFSET(IllegalEventHandler)
004D 26C74402----   R      337             MOV     ES: WORD PTR [SI + 2], SEG(IllegalEventHandler)
                           338     
0053                       339     DoneStore:                      ;done storing the vector
0053 83C604                340             ADD     SI, 4           ;update pointer to next vector
                           341     
0056 E2E6                  342             LOOP    ClrVectorLoop   ;loop until have cleared all vectors
                           343             ;JMP    EndClrIRQVectors;and all done
                           344     
                           345     
0058                       346     EndClrIRQVectors:               ;all done, return
0058 C3                    347             RET
                           348     
                           349     
                           350     ClrIRQVectors   ENDP
                           351     
                           352     
----                       353     CODE ENDS
                           354     
                           355     
                           356     END

ASSEMBLY COMPLETE, NO ERRORS FOUND
